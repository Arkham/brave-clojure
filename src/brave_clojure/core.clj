(ns brave-clojure.core
  (:gen-class))

(defn -main
  "I don't do a whole lot ... yet."
  [& args]
  (println "# Forms")
  (println "I'm a number!" 10)
  (println "I'm a string!" "Hello there")
  (println "I'm an array!" ["Goodbye" "Cruel" "World"])
  (println "I'm an expression!" (+ 2 3 4))
  (println "I'm concatenating strings!" (str "It was a panda " "in the library " "stealing books."))
  (println)

  (println "# Control Flow")
  (println "I'm a IF condition!" (if true "true" "false"))
  (println "a do grouping" (if true (do (print "I am ") "Dada") (do (print "I am not ") "Nana")))
  (println "the when operator" (when true (print "I am using ") "oh yeah"))
  (def failed-protagonist-names
    ["Larry Potter",
     "Doreen the Explorer",
     "The Incredible Bulk"])
  (println "I'm a def example!" failed-protagonist-names)
  (println)

  (println "# Data structures")
  (println "Is nil nil?" (nil? nil))
  (println "Is 1 nil?" (nil? 1))
  (println "Is nil = nil?" (= nil nil))
  (println "Is 1 = 1?" (= 1 1))
  (println "Is 1 = 2?" (= 1 2))
  (println "Here are some numbers" [1 1.345 2/5])
  (println "Here are some strings" ["Hello World" "'Lord Voldemort' is his name" "\"Escapin'\" is fun"])
  (def str-interpol "String Interpolation")
  (println "Unfortunately" (str "No " str-interpol))
  (println)

  (println "# Maps")
  (println "Here, take this map" {})
  (println "Okay, here's a useful one" {:a 1 :b "boring example" :c []})
  (println "Strings can be keys too.." {"imma-string" 1337})
  (println "And functions can be values.." {:orly +})
  (println "Maps can be nested!" {:first {:second {:third "secret"}}})
  (println "Are you getting this?" (get {:a "No" :b "Yes"} :b))
  (println "Are you getting this?" (get {:a "No" :b {:mmm "Yes"}} :b))
  (println "Did you find it?" (get {:a 0 :b 1} :c))
  (println "By default?" (get {:a 0 :b 1} :c "Yup"))
  (println "We need to go deeper." (get-in {:a "No" :b {:c "We need to go deeper."}} [:b :c]))
  (println)

  (println "# Keywords")
  (println "Lookin' up" (:a {:a "Yo" :b "No"}))
  (println "Lookin' up with a default" (:c {:a "Yo" :b "No"} "Unicorns"))
  (println "Hash mapping all the way" (hash-map :a "hello" :b "world"))
  (println)

  (println "# Vectors")
  (println "Here's a vector" [1 2 3])
  (println "The number of the Beast.." (get [1 2 3 5 666] 4))
  (println "Vectors don't discriminate" (get ["one" 2 :three {:four "five"}] 3))
  (println "Dynamic vectors FTW" (vector "creepy" "fool" "moon"))
  (println "Elements are added at the end of the vector" (conj [1 2 3] 4))
  (println)

  (println "# Lists")
  (println "Here's a list" '(1 2 3))
  (println "'get' doesn't work with lists and returns" (get '(0 1 2 3) 2))
  (println "'nth' works instead" (nth '(0 1 2 3) 2))
  (println "Elements are added at the beginning of the vector" (conj '(1 2 3) 0))
  (println)

  (println "# Sets")
  (println "Here's a set" #{"hannan montana" "miley cirus" 44 1337})
  (println "Sets don't have duplicates" (conj #{1 2 3} 2))
  (println "You can you get too" (get #{:this :that} :this) (:is #{:is :isnt}) (get #{:cool} :cool))
  (println "When it can't find it, it still returns" (get #{:rite} :sausage))
  (println "Transform" [3 3 4 3 4] "into a set:" (set [3 3 4 3 4]))
  (println "Generating sets dynamically" (hash-set 1 1 3 2 1) (sorted-set :b :c :a))
  (println)

  (println "# Symbols, naming and quoting")
  (def failed-movie-titles ["Gone with the moving air" "Swellfellas"])
  (println "Here are some failed movie titles" failed-movie-titles)
  (println "Quoting lets you use the symbol as data structure" 'failed-movie-titles)
  (println "You can quote collections as well" '(failed-movie-titles 1 two :three))
  (println)

  (println "# Simplicity")
  (println "It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.")
  (println)

  (println "# FUNCTIONS")
  (println "They see me callin', they hatin'" (+ 1 2 3) (* 1 2 3) (first [6 5 4]))
  (println "Combining functions" (or + -))
  (println "Let's go deeper." ((or + -) 1 2 3))
  (println "Let's go deeper." ((or false -) 1 2 3))
  (println "Let's go deeper." ((and (= 1 1) *) 1 2 3))
  (println "Let's go deeper." ((first [/ :nada]) 1 2 3))
  (println "Ohh, maps" (map inc [0 1 2]))
  (println "Some serious evaluation.." (+ (inc 199) (/ 100 (- 7 2))))
)
